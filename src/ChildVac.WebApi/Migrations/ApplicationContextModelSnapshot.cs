// <auto-generated />
using System;
using ChildVac.WebApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ChildVac.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ChildVac.WebApi.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Diagnosis");

                    b.Property<int?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChildId");

                    b.Property<int?>("DoctorId");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("TicketId");

                    b.Property<int?>("VaccineId");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Vaccination");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("RecieveTime");

                    b.HasKey("Id");

                    b.ToTable("Vaccine");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Child", b =>
                {
                    b.HasBaseType("ChildVac.WebApi.Models.User");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Iin")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<int?>("ParentId");

                    b.HasIndex("ParentId");

                    b.HasDiscriminator().HasValue("Child");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Doctor", b =>
                {
                    b.HasBaseType("ChildVac.WebApi.Models.User");

                    b.Property<int>("HospitalId");

                    b.HasIndex("HospitalId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Parent", b =>
                {
                    b.HasBaseType("ChildVac.WebApi.Models.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Prescription", b =>
                {
                    b.HasOne("ChildVac.WebApi.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Ticket", b =>
                {
                    b.HasOne("ChildVac.WebApi.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId");

                    b.HasOne("ChildVac.WebApi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Vaccination", b =>
                {
                    b.HasOne("ChildVac.WebApi.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("ChildVac.WebApi.Models.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Child", b =>
                {
                    b.HasOne("ChildVac.WebApi.Models.Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("ChildVac.WebApi.Models.Doctor", b =>
                {
                    b.HasOne("ChildVac.WebApi.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
